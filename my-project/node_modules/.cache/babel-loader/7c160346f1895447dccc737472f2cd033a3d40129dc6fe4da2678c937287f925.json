{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './AdminPayments.css';\n\n// const AdminPayments = () => {\n//   const [payments, setPayments] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedPayment, setSelectedPayment] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const fetchPayments = async () => {\n//     try {\n//       const res = await fetch('/api/odemeler');\n//       const data = await res.json();\n//       setPayments(data);\n//     } catch (err) {\n//       setError('Ödemeler yüklenirken hata oluştu.');\n//       console.error(err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPayments();\n//   }, []);\n\n//   const handleView = async (id) => {\n//     setLoading(true);\n//     setSelectedPayment(null);\n//     try {\n//       const res = await fetch(`/api/odemeler/${id}`);\n//       const data = await res.json();\n//       setSelectedPayment(data);\n//     } catch (err) {\n//       setError('Ödeme detayı yüklenirken hata oluştu.');\n//       console.error(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const filteredPayments = payments.filter(payment =>\n//     payment.arac_plaka.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n\n//   return (\n//     <div className=\"admin-payments\">\n//       <h2>Ödeme Kayıtları</h2>\n\n//       <input\n//         type=\"text\"\n//         placeholder=\"Araç plakasına göre ara...\"\n//         value={searchTerm}\n//         onChange={e => setSearchTerm(e.target.value)}\n//       />\n\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Ödeme ID</th>\n//             <th>Araç Plaka</th>\n//             <th>Ücret (TL)</th>\n//             <th>Detaylar</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredPayments.map(payment => (\n//             <tr key={payment.ucret_ID}>\n//               <td>{payment.ucret_ID}</td>\n//               <td>{payment.arac_plaka}</td>\n//               <td>{payment.ucret}</td>\n//               <td><button onClick={() => handleView(payment.ucret_ID)}>Görüntüle</button></td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Pop-up */}\n//       {loading && <div className=\"popup-bg\">Yükleniyor...</div>}\n\n//       {selectedPayment && (\n//         <div className=\"popup-bg\">\n//           <div className=\"popup\">\n//             <h3>Ödeme Detayları</h3>\n//             <ul>\n//               <li><strong>Ödeme ID:</strong> {selectedPayment.ucret_ID}</li>\n//               <li><strong>Araç ID:</strong> {selectedPayment.arac_ID}</li>\n//               <li><strong>Plaka:</strong> {selectedPayment.arac_plaka}</li>\n//               <li><strong>Giriş ID:</strong> {selectedPayment.giris_ID}</li>\n//               <li><strong>Giriş Saati:</strong> {new Date(selectedPayment.giris_saat).toLocaleString()}</li>\n//               <li><strong>Çıkış ID:</strong> {selectedPayment.cikis_ID}</li>\n//               <li><strong>Çıkış Saati:</strong> {new Date(selectedPayment.cikis_saati).toLocaleString()}</li>\n//               <li><strong>Toplam Süre:</strong> {selectedPayment.toplam_dakika} dakika</li>\n//               <li><strong>Ücret:</strong> {selectedPayment.ucret} TL</li>\n//             </ul>\n//             <button onClick={() => setSelectedPayment(null)}>Kapat</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AdminPayments;\n// routes/odemeler.js\nconst express = require('express');\nconst router = express.Router();\nconst connection = require('../db');\n\n// Ödemeleri listeleme\nrouter.get('/', (req, res) => {\n  const query = `\n    SELECT \n      o.ucret_ID,\n      o.ucret,\n      o.odeme_yontemi,\n      o.odeme_tarihi,\n      a.arac_plaka\n    FROM Odemeler o\n    JOIN Giris_Kayitlari g ON o.giris_ID = g.giris_ID\n    JOIN Araclar a ON g.arac_ID = a.arac_ID\n    ORDER BY o.odeme_tarihi DESC\n  `;\n  connection.query(query, (err, results) => {\n    if (err) {\n      console.error('Ödeme kayıtları alınırken hata:', err);\n      return res.status(500).json({\n        error: 'Ödeme kayıtları getirilemedi.'\n      });\n    }\n    res.json(results);\n  });\n});\n\n// Tekil ödeme detayı alma\nrouter.get('/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const query = `\n    SELECT \n      o.ucret_ID,\n      o.ucret,\n      o.odeme_yontemi,\n      o.odeme_tarihi,\n      a.arac_ID,\n      a.arac_plaka,\n      g.giris_ID,\n      g.giris_saat,\n      c.cikis_ID,\n      c.cikis_saati,\n      TIMESTAMPDIFF(MINUTE, g.giris_saat, c.cikis_saati) AS toplam_dakika\n    FROM Odemeler o\n    JOIN Giris_Kayitlari g ON o.giris_ID = g.giris_ID\n    JOIN Araclar a ON g.arac_ID = a.arac_ID\n    JOIN Cikis_Kayitlari c ON g.giris_ID = c.giris_ID\n    WHERE o.ucret_ID = ?\n  `;\n  connection.query(query, [id], (err, results) => {\n    if (err) {\n      console.error('Ödeme detayı alınırken hata:', err);\n      return res.status(500).json({\n        error: 'Ödeme detayı getirilemedi.'\n      });\n    }\n    if (results.length === 0) {\n      return res.status(404).json({\n        error: 'Ödeme kaydı bulunamadı.'\n      });\n    }\n    res.json(results[0]);\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","connection","get","req","res","query","err","results","console","error","status","json","id","params","length","module","exports"],"sources":["C:/Users/abdul/OneDrive/Masaüstü/otopark/otopark-projesi/my-project/src/AdminPayments.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './AdminPayments.css';\r\n\r\n// const AdminPayments = () => {\r\n//   const [payments, setPayments] = useState([]);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [selectedPayment, setSelectedPayment] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState('');\r\n\r\n//   const fetchPayments = async () => {\r\n//     try {\r\n//       const res = await fetch('/api/odemeler');\r\n//       const data = await res.json();\r\n//       setPayments(data);\r\n//     } catch (err) {\r\n//       setError('Ödemeler yüklenirken hata oluştu.');\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPayments();\r\n//   }, []);\r\n\r\n//   const handleView = async (id) => {\r\n//     setLoading(true);\r\n//     setSelectedPayment(null);\r\n//     try {\r\n//       const res = await fetch(`/api/odemeler/${id}`);\r\n//       const data = await res.json();\r\n//       setSelectedPayment(data);\r\n//     } catch (err) {\r\n//       setError('Ödeme detayı yüklenirken hata oluştu.');\r\n//       console.error(err);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const filteredPayments = payments.filter(payment =>\r\n//     payment.arac_plaka.toLowerCase().includes(searchTerm.toLowerCase())\r\n//   );\r\n\r\n//   return (\r\n//     <div className=\"admin-payments\">\r\n//       <h2>Ödeme Kayıtları</h2>\r\n      \r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Araç plakasına göre ara...\"\r\n//         value={searchTerm}\r\n//         onChange={e => setSearchTerm(e.target.value)}\r\n//       />\r\n\r\n//       {error && <p className=\"error\">{error}</p>}\r\n\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Ödeme ID</th>\r\n//             <th>Araç Plaka</th>\r\n//             <th>Ücret (TL)</th>\r\n//             <th>Detaylar</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {filteredPayments.map(payment => (\r\n//             <tr key={payment.ucret_ID}>\r\n//               <td>{payment.ucret_ID}</td>\r\n//               <td>{payment.arac_plaka}</td>\r\n//               <td>{payment.ucret}</td>\r\n//               <td><button onClick={() => handleView(payment.ucret_ID)}>Görüntüle</button></td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Pop-up */}\r\n//       {loading && <div className=\"popup-bg\">Yükleniyor...</div>}\r\n\r\n//       {selectedPayment && (\r\n//         <div className=\"popup-bg\">\r\n//           <div className=\"popup\">\r\n//             <h3>Ödeme Detayları</h3>\r\n//             <ul>\r\n//               <li><strong>Ödeme ID:</strong> {selectedPayment.ucret_ID}</li>\r\n//               <li><strong>Araç ID:</strong> {selectedPayment.arac_ID}</li>\r\n//               <li><strong>Plaka:</strong> {selectedPayment.arac_plaka}</li>\r\n//               <li><strong>Giriş ID:</strong> {selectedPayment.giris_ID}</li>\r\n//               <li><strong>Giriş Saati:</strong> {new Date(selectedPayment.giris_saat).toLocaleString()}</li>\r\n//               <li><strong>Çıkış ID:</strong> {selectedPayment.cikis_ID}</li>\r\n//               <li><strong>Çıkış Saati:</strong> {new Date(selectedPayment.cikis_saati).toLocaleString()}</li>\r\n//               <li><strong>Toplam Süre:</strong> {selectedPayment.toplam_dakika} dakika</li>\r\n//               <li><strong>Ücret:</strong> {selectedPayment.ucret} TL</li>\r\n//             </ul>\r\n//             <button onClick={() => setSelectedPayment(null)}>Kapat</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AdminPayments;\r\n// routes/odemeler.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst connection = require('../db');\r\n\r\n// Ödemeleri listeleme\r\nrouter.get('/', (req, res) => {\r\n  const query = `\r\n    SELECT \r\n      o.ucret_ID,\r\n      o.ucret,\r\n      o.odeme_yontemi,\r\n      o.odeme_tarihi,\r\n      a.arac_plaka\r\n    FROM Odemeler o\r\n    JOIN Giris_Kayitlari g ON o.giris_ID = g.giris_ID\r\n    JOIN Araclar a ON g.arac_ID = a.arac_ID\r\n    ORDER BY o.odeme_tarihi DESC\r\n  `;\r\n\r\n  connection.query(query, (err, results) => {\r\n    if (err) {\r\n      console.error('Ödeme kayıtları alınırken hata:', err);\r\n      return res.status(500).json({ error: 'Ödeme kayıtları getirilemedi.' });\r\n    }\r\n\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Tekil ödeme detayı alma\r\nrouter.get('/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const query = `\r\n    SELECT \r\n      o.ucret_ID,\r\n      o.ucret,\r\n      o.odeme_yontemi,\r\n      o.odeme_tarihi,\r\n      a.arac_ID,\r\n      a.arac_plaka,\r\n      g.giris_ID,\r\n      g.giris_saat,\r\n      c.cikis_ID,\r\n      c.cikis_saati,\r\n      TIMESTAMPDIFF(MINUTE, g.giris_saat, c.cikis_saati) AS toplam_dakika\r\n    FROM Odemeler o\r\n    JOIN Giris_Kayitlari g ON o.giris_ID = g.giris_ID\r\n    JOIN Araclar a ON g.arac_ID = a.arac_ID\r\n    JOIN Cikis_Kayitlari c ON g.giris_ID = c.giris_ID\r\n    WHERE o.ucret_ID = ?\r\n  `;\r\n\r\n  connection.query(query, [id], (err, results) => {\r\n    if (err) {\r\n      console.error('Ödeme detayı alınırken hata:', err);\r\n      return res.status(500).json({ error: 'Ödeme detayı getirilemedi.' });\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).json({ error: 'Ödeme kaydı bulunamadı.' });\r\n    }\r\n\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,UAAU,GAAGH,OAAO,CAAC,OAAO,CAAC;;AAEnC;AACAC,MAAM,CAACG,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC5B,MAAMC,KAAK,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEDJ,UAAU,CAACI,KAAK,CAACA,KAAK,EAAE,CAACC,GAAG,EAAEC,OAAO,KAAK;IACxC,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEH,GAAG,CAAC;MACrD,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEF,KAAK,EAAE;MAAgC,CAAC,CAAC;IACzE;IAEAL,GAAG,CAACO,IAAI,CAACJ,OAAO,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAR,MAAM,CAACG,GAAG,CAAC,MAAM,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC/B,MAAM;IAAEQ;EAAG,CAAC,GAAGT,GAAG,CAACU,MAAM;EACzB,MAAMR,KAAK,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEDJ,UAAU,CAACI,KAAK,CAACA,KAAK,EAAE,CAACO,EAAE,CAAC,EAAE,CAACN,GAAG,EAAEC,OAAO,KAAK;IAC9C,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEH,GAAG,CAAC;MAClD,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEF,KAAK,EAAE;MAA6B,CAAC,CAAC;IACtE;IAEA,IAAIF,OAAO,CAACO,MAAM,KAAK,CAAC,EAAE;MACxB,OAAOV,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEF,KAAK,EAAE;MAA0B,CAAC,CAAC;IACnE;IAEAL,GAAG,CAACO,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFQ,MAAM,CAACC,OAAO,GAAGjB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}